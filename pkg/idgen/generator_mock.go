// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/utsabbera/task-master/pkg/idgen (interfaces: Generator)
//
// Generated by this command:
//
//	mockgen -destination=generator_mock.go -package=idgen . Generator
//

// Package idgen is a generated GoMock package.
package idgen

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// Current mocks base method.
func (m *MockGenerator) Current() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(string)
	return ret0
}

// Current indicates an expected call of Current.
func (mr *MockGeneratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockGenerator)(nil).Current))
}

// Next mocks base method.
func (m *MockGenerator) Next() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(string)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockGeneratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockGenerator)(nil).Next))
}

// Reset mocks base method.
func (m *MockGenerator) Reset(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", arg0)
}

// Reset indicates an expected call of Reset.
func (mr *MockGeneratorMockRecorder) Reset(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockGenerator)(nil).Reset), arg0)
}
