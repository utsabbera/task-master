// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/utsabbera/task-master/pkg/chatbot (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=client_mock.go -package=chatbot . Client
//

// Package chatbot is a generated GoMock package.
package chatbot

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockClient) Chat(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockClientMockRecorder) Chat(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockClient)(nil).Chat), arg0, arg1)
}

// Init mocks base method.
func (m *MockClient) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockClientMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockClient)(nil).Init))
}

// RegisterFunction mocks base method.
func (m *MockClient) RegisterFunction(arg0 Function) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterFunction", arg0)
}

// RegisterFunction indicates an expected call of RegisterFunction.
func (mr *MockClientMockRecorder) RegisterFunction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFunction", reflect.TypeOf((*MockClient)(nil).RegisterFunction), arg0)
}

// RegisterFunctions mocks base method.
func (m *MockClient) RegisterFunctions(arg0 ...Function) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RegisterFunctions", varargs...)
}

// RegisterFunctions indicates an expected call of RegisterFunctions.
func (mr *MockClientMockRecorder) RegisterFunctions(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFunctions", reflect.TypeOf((*MockClient)(nil).RegisterFunctions), arg0...)
}
