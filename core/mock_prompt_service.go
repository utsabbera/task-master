// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/utsabbera/task-master/core (interfaces: PromptService)
//
// Generated by this command:
//
//	mockgen -destination=mock_prompt_service.go -package=core . PromptService
//

// Package core is a generated GoMock package.
package core

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPromptService is a mock of PromptService interface.
type MockPromptService struct {
	ctrl     *gomock.Controller
	recorder *MockPromptServiceMockRecorder
}

// MockPromptServiceMockRecorder is the mock recorder for MockPromptService.
type MockPromptServiceMockRecorder struct {
	mock *MockPromptService
}

// NewMockPromptService creates a new mock instance.
func NewMockPromptService(ctrl *gomock.Controller) *MockPromptService {
	mock := &MockPromptService{ctrl: ctrl}
	mock.recorder = &MockPromptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromptService) EXPECT() *MockPromptServiceMockRecorder {
	return m.recorder
}

// ProcessPrompt mocks base method.
func (m *MockPromptService) ProcessPrompt(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPrompt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPrompt indicates an expected call of ProcessPrompt.
func (mr *MockPromptServiceMockRecorder) ProcessPrompt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPrompt", reflect.TypeOf((*MockPromptService)(nil).ProcessPrompt), arg0)
}
